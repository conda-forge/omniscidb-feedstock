From 61dd2906682ac7b03188c39a75ffae4e89944086 Mon Sep 17 00:00:00 2001
From: Guilherme Leobas <guilhermeleobas@gmail.com>
Date: Mon, 7 Feb 2022 14:40:06 -0300
Subject: [PATCH] Fix Windows build

---
 CMakeLists.txt                            |  6 ++++--
 Catalog/OptionsContainer.h                |  2 +-
 DataMgr/BufferMgr/BufferMgr.h             |  3 +++
 StringDictionary/DictRef.h                |  1 +
 StringDictionary/StringDictionary.cpp     |  6 ++++++
 ThirdParty/rapidjson/rapidjson/document.h | 17 +++++++++++++++++
 6 files changed, 32 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index dfda618784..a63a2e5be6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -16,7 +16,9 @@ if(DEFINED ENV{CONDA_PREFIX})
   # Adding formating macros
   add_definitions("-D__STDC_FORMAT_MACROS=1")
   # fixes always_inline attribute errors
-  add_compile_options("-fno-semantic-interposition")
+  if (NOT DEFINED MSVC)
+    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-fno-semantic-interposition>")
+  endif()
   # Adding `--sysroot=...` resolves `no member named 'signbit' in the global namespace` error:
   set(CMAKE_SYSROOT "$ENV{CONDA_BUILD_SYSROOT}")
 endif(DEFINED ENV{CONDA_PREFIX})
@@ -389,7 +391,7 @@ if(MSVC)
   option(ENABLE_NO_WINWARNINGS "disable most windows warnings" ON)
   add_compile_definitions("NOMINMAX")
   if(ENABLE_NO_WINWARNINGS)
-    add_compile_definitions("_STL_EXTRA_DISABLED_WARNINGS=4146 4242 4244 4267 4355 4365 4458 4624 4820 4996 5204 5219" "NOMINMAX")
+    add_compile_definitions("_STL_EXTRA_DISABLED_WARNINGS=4146 4242 4244 4267 4355 4365 4458 4624 4820 4996 5204 5219 4571 4582 4623 4625 4626 4710 4711 4774 5026 5027" "NOMINMAX")
     # disable 4702 unreachable code warning
     # with /Qspectre set, disable the warning C5045
     add_compile_options(/W0 /wd4702 /wd5045)
diff --git a/Catalog/OptionsContainer.h b/Catalog/OptionsContainer.h
index da92e454b0..9a6ba6d55c 100644
--- a/Catalog/OptionsContainer.h
+++ b/Catalog/OptionsContainer.h
@@ -71,7 +71,7 @@ struct OptionsContainer {
     if (clear) {
       options.clear();
     }
-    for (const auto& member : ddl_options.GetObject()) {
+    for (const auto& member : ddl_options.GetObj()) {
       std::string key = to_upper(member.name.GetString());
       options[key] = member.value.GetString();
     }
diff --git a/DataMgr/BufferMgr/BufferMgr.h b/DataMgr/BufferMgr/BufferMgr.h
index 1df594918b..cfbdad4159 100644
--- a/DataMgr/BufferMgr/BufferMgr.h
+++ b/DataMgr/BufferMgr/BufferMgr.h
@@ -34,6 +34,9 @@
 #include "DataMgr/AbstractBuffer.h"
 #include "DataMgr/AbstractBufferMgr.h"
 #include "DataMgr/BufferMgr/BufferSeg.h"
+#if defined(_WIN32)
+#include <WinSock2.h>
+#endif
 #include "Shared/boost_stacktrace.hpp"
 #include "Shared/types.h"
 
diff --git a/StringDictionary/DictRef.h b/StringDictionary/DictRef.h
index 62456859ee..5e9f8cb1dc 100644
--- a/StringDictionary/DictRef.h
+++ b/StringDictionary/DictRef.h
@@ -4,6 +4,7 @@
 #include <cstdint>
 #include <cstdlib>
 #include <functional>
+#include <string>
 
 struct dict_ref_t {
   int32_t dbId;
diff --git a/StringDictionary/StringDictionary.cpp b/StringDictionary/StringDictionary.cpp
index 23cf7262b1..4cb401ade7 100644
--- a/StringDictionary/StringDictionary.cpp
+++ b/StringDictionary/StringDictionary.cpp
@@ -43,6 +43,12 @@
 
 #include "LeafHostInfo.h"
 
+#ifdef _WIN32
+#if defined(ERROR) || defined(INFO) || defined(WARNING) || defined(FATAL)
+#include "Shared/cleanup_global_namespace.h"
+#endif
+#endif
+
 bool g_cache_string_hash{true};
 
 namespace {
diff --git a/ThirdParty/rapidjson/rapidjson/document.h b/ThirdParty/rapidjson/rapidjson/document.h
index eb4be3a38e..90bb46ed92 100644
--- a/ThirdParty/rapidjson/rapidjson/document.h
+++ b/ThirdParty/rapidjson/rapidjson/document.h
@@ -44,6 +44,15 @@ RAPIDJSON_DIAG_OFF(terminate) // ignore throwing RAPIDJSON_ASSERT in RAPIDJSON_N
 #endif
 #endif // __GNUC__
 
+#ifdef GetObject
+// see https://github.com/Tencent/rapidjson/issues/1448
+// a former included windows.h might have defined a macro called GetObject, which affects
+// GetObject defined here. This ensures the macro does not get applied
+#pragma push_macro("GetObject")
+#define RAPIDJSON_WINDOWS_GETOBJECT_WORKAROUND_APPLIED
+#undef GetObject
+#endif
+
 #ifndef RAPIDJSON_NOMEMBERITERATORCLASS
 #include <iterator> // std::iterator, std::random_access_iterator_tag
 #endif
@@ -1456,7 +1465,9 @@ public:
     }
 
     Object GetObject() { RAPIDJSON_ASSERT(IsObject()); return Object(*this); }
+    Object GetObj() { RAPIDJSON_ASSERT(IsObject()); return Object(*this); }
     ConstObject GetObject() const { RAPIDJSON_ASSERT(IsObject()); return ConstObject(*this); }
+    ConstObject GetObj() const { RAPIDJSON_ASSERT(IsObject()); return ConstObject(*this); }
 
     //@}
 
@@ -2584,4 +2595,10 @@ private:
 RAPIDJSON_NAMESPACE_END
 RAPIDJSON_DIAG_POP
 
+
+#ifdef RAPIDJSON_WINDOWS_GETOBJECT_WORKAROUND_APPLIED
+#pragma pop_macro("GetObject")
+#undef RAPIDJSON_WINDOWS_GETOBJECT_WORKAROUND_APPLIED
+#endif
+
 #endif // RAPIDJSON_DOCUMENT_H_
-- 
2.33.0.windows.1

